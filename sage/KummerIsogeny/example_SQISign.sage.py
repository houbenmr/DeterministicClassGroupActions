"""
This is not an implementation of SQISign

The purpose of this file is simply a timing of the
costs of computing and evaluating isogenies using the
available torsion from the SQISign parameters
"""


# This file was *autogenerated* from the file example_SQISign.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_73743043621499797449074820543863456997944695372324032511999999999999999999999 = Integer(73743043621499797449074820543863456997944695372324032511999999999999999999999); _sage_const_2 = Integer(2); _sage_const_33 = Integer(33); _sage_const_5 = Integer(5); _sage_const_21 = Integer(21); _sage_const_7 = Integer(7); _sage_const_11 = Integer(11); _sage_const_31 = Integer(31); _sage_const_83 = Integer(83); _sage_const_107 = Integer(107); _sage_const_137 = Integer(137); _sage_const_751 = Integer(751); _sage_const_827 = Integer(827); _sage_const_3691 = Integer(3691); _sage_const_4019 = Integer(4019); _sage_const_6983 = Integer(6983); _sage_const_3 = Integer(3); _sage_const_53 = Integer(53); _sage_const_43 = Integer(43); _sage_const_103 = Integer(103); _sage_const_109 = Integer(109); _sage_const_199 = Integer(199); _sage_const_227 = Integer(227); _sage_const_419 = Integer(419); _sage_const_491 = Integer(491); _sage_const_569 = Integer(569); _sage_const_631 = Integer(631); _sage_const_677 = Integer(677); _sage_const_857 = Integer(857); _sage_const_859 = Integer(859); _sage_const_883 = Integer(883); _sage_const_1019 = Integer(1019); _sage_const_1171 = Integer(1171); _sage_const_1879 = Integer(1879); _sage_const_2713 = Integer(2713); _sage_const_4283 = Integer(4283); _sage_const_23759399264157352358673788613307970528646815114090876784643387662192449945599 = Integer(23759399264157352358673788613307970528646815114090876784643387662192449945599); _sage_const_65 = Integer(65); _sage_const_19 = Integer(19); _sage_const_29 = Integer(29); _sage_const_37 = Integer(37); _sage_const_47 = Integer(47); _sage_const_197 = Integer(197); _sage_const_263 = Integer(263); _sage_const_281 = Integer(281); _sage_const_461 = Integer(461); _sage_const_521 = Integer(521); _sage_const_3923 = Integer(3923); _sage_const_13 = Integer(13); _sage_const_17 = Integer(17); _sage_const_79 = Integer(79); _sage_const_157 = Integer(157); _sage_const_239 = Integer(239); _sage_const_271 = Integer(271); _sage_const_283 = Integer(283); _sage_const_307 = Integer(307); _sage_const_563 = Integer(563); _sage_const_599 = Integer(599); _sage_const_607 = Integer(607); _sage_const_619 = Integer(619); _sage_const_743 = Integer(743); _sage_const_941 = Integer(941); _sage_const_2357 = Integer(2357); _sage_const_0 = Integer(0)
# Local imports
from kummer_line import KummerLine
from utilities import compute_quadratic_twist, fix_even_torsion
from benchmark_utils import compare_isogeny

proof.all(False)

PARAM = "p3923"
for arg in sys.argv[_sage_const_1 :]:
    if arg.lower() in ["--p6983"]:
        PARAM = "p6983"
    if arg.lower() in ["--p3923"]:
        PARAM = "p3923"

if PARAM == "p3923":
    # p6983
    # p - 1 = 2 * 3^53 * 43 * 103^2 * 109 * 199 * 227 * 419 * 491 * 569 * 631 * 677 * 857 * 859 * 883 * 1019 * 1171 * 1879 * 2713 * 4283
    # p + 1 = 2^33 * 5^21 * 7^2 * 11 * 31 * 83 * 107 * 137 * 751 * 827 * 3691 * 4019 * 6983 * 517434778561 * 26602537156291
    p = _sage_const_73743043621499797449074820543863456997944695372324032511999999999999999999999 

    A_torsion = _sage_const_2 **_sage_const_33  * _sage_const_5 **_sage_const_21  * _sage_const_7 **_sage_const_2  * _sage_const_11  * _sage_const_31  * _sage_const_83  * _sage_const_107  * _sage_const_137  * _sage_const_751  * _sage_const_827  * _sage_const_3691  * _sage_const_4019  * _sage_const_6983 
    A_cofactor = (p+_sage_const_1 ) // A_torsion
    B_torsion = _sage_const_2  * _sage_const_3 **_sage_const_53  * _sage_const_43  * _sage_const_103 **_sage_const_2  * _sage_const_109  * _sage_const_199  * _sage_const_227  * _sage_const_419  * _sage_const_491  * _sage_const_569  * _sage_const_631  * _sage_const_677  * _sage_const_857  * _sage_const_859  * _sage_const_883  * _sage_const_1019  * _sage_const_1171  * _sage_const_1879  * _sage_const_2713  * _sage_const_4283 
    B_cofactor = (p-_sage_const_1 ) // B_torsion

else:
    # p - 1 = 2 * 3^65 * 13 * 17 * 43 * 79 * 157 * 239 * 271 * 283 * 307 * 563 * 599 * 607 * 619 * 743 * 827 * 941 * 2357 * 10069
    # p + 1 = 2^65 * 5^2 * 7 * 11 * 19 * 29^2 * 37^2 * 47 * 197 * 263 * 281 * 461 * 521 * 3923 * 62731 * 96362257 * 3924006112952623
    p = _sage_const_23759399264157352358673788613307970528646815114090876784643387662192449945599 

    A_torsion = _sage_const_2 **_sage_const_65  * _sage_const_5 **_sage_const_2  * _sage_const_7  * _sage_const_11  * _sage_const_19  * _sage_const_29 **_sage_const_2  * _sage_const_37 **_sage_const_2  * _sage_const_47  * _sage_const_197  * _sage_const_263  * _sage_const_281  * _sage_const_461  * _sage_const_521  * _sage_const_3923 
    A_cofactor = (p+_sage_const_1 ) // A_torsion
    B_torsion = _sage_const_2  * _sage_const_3 **_sage_const_65  * _sage_const_13  * _sage_const_17  * _sage_const_43  * _sage_const_79  * _sage_const_157  * _sage_const_239  * _sage_const_271  * _sage_const_283  * _sage_const_307  * _sage_const_563  * _sage_const_599  * _sage_const_607  * _sage_const_619  * _sage_const_743  * _sage_const_827  * _sage_const_941  * _sage_const_2357 
    B_cofactor = (p-_sage_const_1 ) // B_torsion

# Compute base field and elliptic curve
Fp2 = GF(p**_sage_const_2 , names=('i',)); (i,) = Fp2._first_ngens(1)
E0 = EllipticCurve(Fp2, [_sage_const_1 , _sage_const_0 ])

# Compute the quadratic twist of E0 for torsion
# generation
D_twist, E0t = compute_quadratic_twist(E0)

# Compute points on E0 and E0t with order 
# A_torsion and B_torsion
PA, QA = [A_cofactor*X for X in E0.gens()]
PB, QB = [B_cofactor*X for X in E0t.gens()]

# Ensure that 2^(b-1) * Q = (0,0) to 
# stop the kernel ever being the point (0,0)
PA, QA = fix_even_torsion(PA, QA)
PB, QB = fix_even_torsion(PB, QB, twist=True)

# Represent x-coordinate on the Kummer line of
# E0
L = KummerLine(E0)
xPA, xQA, xPQA = [L(X) for X in (PA, QA, PA-QA)]

# Points in the B torsion are on E0_twist, so we map
# the x-coords back to E0 
xPB, xQB, xPQB = [L(D_twist * X[_sage_const_0 ]) for X in (PB, QB, PB-QB)]

# Compare isogeny timings for p+1 torsion and p-1 torsion
compare_isogeny(PA, QA, xPA, xQA, A_torsion)
compare_isogeny(PB, QB, xPB, xQB, B_torsion)

